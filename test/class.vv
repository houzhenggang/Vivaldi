require "assert"

class Base
  fn set_a(a): @a = a
  fn get_i(): @i
end

class Derived : Base
  fn init(a, b): do
    @i = a + b
  end

  fn get_a(): @a
end

let obj = new Derived(1, 2)

fn type_system(): do
  assert(obj.type() == Derived,       "obj.type() == Derived")
  assert(obj.type().parent() == Base, "obj.type().parent() == Base")
  assert(obj.get_i() == 3,            "obj.get_i() == 3")
  obj.set_a('foo)
  assert(obj.get_a() == 'foo,         "obj.get_a() == 'foo")
end

fn instantiation(): do
  class Uninstantiable
    fn init(): except nil
  end

  let instantiated = true
  let i = nil
  try: new Uninstantiable()
  catch e: instantiated = false
  assert(!instantiated && i == nil, "returned object from exception in init")
end

fn self_wrapping(): do
  class SelfWrapper
    fn init(): @a = 5
    fn get_a(): @a
    fn self_a_getter(): fn (): self.get_a()
  end

  fn apply(f): f()
  let obj = new SelfWrapper()
  let five = apply(obj.self_a_getter())
  assert(five == 5, "capturing self in lambdas")
end

section("Types")
test(type_system, "basic")
test(instantiation, "excepting from initializer")
test(self_wrapping, "capturing self in closures")
